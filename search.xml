<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown高级语法</title>
    <url>/action-hexo/markdown-advance-syntax.html</url>
    <content><![CDATA[<p>有少数编辑器不支持，或者需要安装相应的扩展渲染，使用前请先预览确认。</p>
<span id="more"></span>
<h2 id="目录"><a class="headerlink" href="#目录"></a>目录</h2>
<p>通过<code>[TOC]</code>标记来插入目录。</p>
<p>在编辑器不支持<code>[TOC]</code>标记的情况下可以使用添加id的方法构建目录。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> [<span class="string">1.Content one</span>](<span class="link">#chapter1</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">2.Content two</span>](<span class="link">#chapter2</span>)</span><br></pre></td></tr></table></figure>
<p>显示效果：</p>
<ul>
<li><a href="#chapter1">1.Content one</a></li>
<li><a href="#chapter2">2.Content two</a></li>
</ul>
<h2 id="TeX公式"><a class="headerlink" href="#TeX公式"></a>TeX公式</h2>
<p>内联的TeX公式使用一个美元符号标记。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</span><br></pre></td></tr></table></figure>
<p>会被编译成<br>
内联（行内）公式：$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</p>
<p>TeX公式块用独占一行的两个美元符号来标记。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$\left \lbrace \sum<span class="emphasis">_&#123;i=0&#125;^n i^3 = \frac&#123;(n^2+n)(n+6)&#125;&#123;9&#125; \right \rbrace$$</span></span><br></pre></td></tr></table></figure>
<p>会被编译成</p>
<p>$$\left \lbrace \sum_{i=0}^n i^3 = \frac{(n^2+n)(n+6)}{9} \right \rbrace$$</p>
<p>一段解题演示:</p>
<ol>
<li>
<p>$\because f(x)$的定义域为$(0,+\infty)$，$f{^{\prime}}(x)=\dfrac{1-a-ln x}{x^2}$，$ \therefore f{^{\prime}}(\mathrm{e})=-\dfrac{a}{e^2}$，由已知可得$f{^{\prime}}(\mathrm{e})\times 2=-1$，即$a=\dfrac{\mathrm{e}^2}{2}$</p>
</li>
<li>
<p>当 $x&gt;0$ 时$g(x)\geq f(x)$，即：$$\mathrm{e}^x+\dfrac{2}{x}-1\geq\dfrac{\ln x+a}{x}$$ 化简可得：$a\le x\left(\mathrm{e}^x-1\right)-\ln x+2$</p>
</li>
</ol>
<p>以上公式渲染，一般编辑器或渲染模板都会支持，如果你的环境恰好不支持这个功能，可以手动解决。首先引入mathjax脚本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>之后，在需要插入公式的地方使用 <code>&lt;script&gt;</code> 标签包裹公式：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;math/tex&quot;</span>&gt;</span></span>\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N<span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;math/tex; mode=display&quot;</span>&gt;</span></span></span><br><span class="line">\Gamma(z) = \int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt\,.</span></span><br><span class="line"><span class="emphasis"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure>
<p>以上公式展示效果，在实际显示过程中，根据网络加载速度不同会有不同的解析展示速度，<code>TeX</code>/<code>LaTex</code> 公式语法参考请见<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">这里</a>。</p>
<h2 id="UML图"><a class="headerlink" href="#UML图"></a>UML图</h2>
<p>语法为在代码块开始行后面加入语法声明，如 ```mermaid ，然后可以像这样来画uml时序图：</p>
<pre class="mermaid">sequenceDiagram
  Alice->>Bob: Hello Bob,how are you?
  Note right of Bob: Bob thinks
  Bob-->>Alice: I am fine thanks! and U?
  Note left of Alice: SB</pre>
<p>其MarkDown代码如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\<span class="code">`\`</span>\`mermaid</span><br><span class="line">sequenceDiagram</span><br><span class="line">  Alice-&gt;&gt;Bob: Hello Bob,how are you?</span><br><span class="line">  Note right of Bob: Bob thinks</span><br><span class="line">  Bob--&gt;&gt;Alice: I am fine thanks! and U?</span><br><span class="line">  Note left of Alice: SB</span><br><span class="line">\<span class="code">`\`</span>\` #代码块标识会被解析，实际上写代码块时不用添加转义符“\”</span><br></pre></td></tr></table></figure>
<p>时序图的语法请见 <a href="https://mermaidjs.github.io/sequenceDiagram.html">这里</a> 或 <a href="http://bramp.github.io/js-sequence-diagrams/">这里</a>。</p>
<p>uml流程图：</p>
<pre class="mermaid">  graph LR;
    A-->B & C-->D;</pre>
<p>其实现代码如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\<span class="code">`\`</span>\`mermaid</span><br><span class="line">graph LR;</span><br><span class="line">  A--&gt;B &amp; C--&gt;D;</span><br><span class="line">\<span class="code">`\`</span>\`</span><br></pre></td></tr></table></figure>
<p>流程图的语法请见 <a href="https://mermaidjs.github.io/flowchart.html">这里</a>， 更复杂点的flowchart可以看 <a href="http://adrai.github.io/flowchart.js/">这里</a> 。</p>
<h2 id="参考文档"><a class="headerlink" href="#参考文档"></a>参考文档</h2>
<ol>
<li><a href="http://xianbai.me/learn-md/article/about/readme.html">Markdown 入门参考</a></li>
<li><a href="https://sobaigu.com/how-to-draw-flowchart-with-markdown.html">MarkDown文档中如何画出流程图</a></li>
<li><a href="https://github.com/wizardforcel/markdown-simple-world">https://github.com/wizardforcel/markdown-simple-world</a></li>
<li><a href="http://stevenshi.me/2017/06/26/hexo-insert-formula/">http://stevenshi.me/2017/06/26/hexo-insert-formula/</a></li>
<li><a href="https://blog.csdn.net/u013282174/article/details/80666123">https://blog.csdn.net/u013282174/article/details/80666123</a></li>
<li><a href="https://www.liuyude.com/How_to_make_your_HEXO_blog_support_handwriting_flowchart.html">https://www.liuyude.com/How_to_make_your_HEXO_blog_support_handwriting_flowchart.html</a></li>
<li><a href="https://mermaidjs.github.io/">https://mermaidjs.github.io/</a></li>
</ol>
<script type="text/javascript" async
  src="https://cdn.staticfile.org/mermaid/10.6.1/mermaid.min.js">
</script>
]]></content>
      <categories>
        <category>学编程</category>
      </categories>
      <tags>
        <tag>混技能</tag>
      </tags>
  </entry>
  <entry>
    <title>学术简历样本</title>
    <url>/action-hexo/academia-example.html</url>
    <content><![CDATA[<blockquote>
<p>这是个简历示例页，内容源文件：<code>source/_posts/academia-example.md</code>，可以修改此文件内容为自己想要的，使用 <code>Markdown</code> 或者 <code>HTML</code> 语法都可以。</p>
</blockquote>
<blockquote>
<p>如果本页排序在站内靠后，该页内容不会在 <code>Academia</code> 主题首页显示，如果遇到不显示的问题，删除其他内容或者将本页排序调整到靠前几页，如：修改本文档 <code>date</code> 值：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">date:</span> <span class="number">2023-8</span><span class="number">-22</span> <span class="number">16</span><span class="string">:59:16</span>    <span class="string">//一般情况下修改这个时间到最新就会排前面</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h1>About me</h1>
<p>This is a simple page for academic website based on Hexo. It just provides a theme frame and all depends on your markdown posts’ styles.</p>
<p>This is the index page which organized with the posts you write in markdown files.</p>
<h1>News</h1>
<ul>
<li>2020-04-23: ver 1.2.0 publish, support pjax.</li>
<li>2020 February, Join in Test University.</li>
<li>A new theme for academic page is published.</li>
</ul>
<h1>Publications</h1>
<ol>
<li>Einstein, Albert, Boris Podolsky, and Nathan Rosen. “Can quantum-mechanical description of physical reality be considered complete?.” Physical review 47.10 (1935): 777.</li>
<li>Einstein, Albert, Boris Podolsky, and Nathan Rosen. “Can quantum-mechanical description of physical reality be considered complete?.” Physical review 47.10 (1935): 777.</li>
</ol>
<p>Add more informations in your posts…</p>
<h1>Introduction</h1>
<p>This is a light &amp; simple &amp; responsive theme for academic websites on Hexo, crafted from <a href="https://github.com/academicpages/academicpages.github.io">academicpages</a> on Jekyll. Thanks a lot.</p>
<p>The theme adopts only <code>post</code> and <code>page</code> in Hexo to show your informations. For an academic page, it’s important to be simple and obvious.</p>
<p>Example page: <a href="https://phosphorw.github.io/">phosphorw.github.io</a></p>
<p><img src="https://raw.githubusercontent.com/PhosphorW/phower-img-folder/master/hexo-theme-academia_mockup.jpg" alt="mockup" loading="lazy"></p>
<h2 id="Installation"><a class="headerlink" href="#Installation"></a>Installation</h2>
<p>The simplest way to install is to clone the entire repository:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/PhosphorW/hexo-theme-academia.git themes/Academia</span><br></pre></td></tr></table></figure>
<p>Some required renderers:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<p>Set theme in hexo work folder’s <code>_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">Academia</span></span><br></pre></td></tr></table></figure>
<h2 id="Create-your-academic-page"><a class="headerlink" href="#Create-your-academic-page"></a>Create your academic page</h2>
<p>Only <code>post</code> and <code>page</code> are supported in this theme.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n post <span class="string">&quot;any title&quot;</span></span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n page <span class="string">&quot;any title&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>Important:</strong> </br><br>
Add <code>academia: true</code> in front_matter filed in <code>post .md</code>.</p>
<img src="https://raw.githubusercontent.com/PhosphorW/phower-img-folder/master/hexo-theme-academia_front-matter.png" width="660px" alt="front_matter">
<p>Only post with <code>academia: true</code> front_matter will be shown on home (index) page. You can write your informations in either one post or some posts with this method. The front_matter doesn’t works in <code>page</code>. The <code>pages</code> are standalone with its markdown content.</p>
<h2 id="Theme-Configurtion"><a class="headerlink" href="#Theme-Configurtion"></a>Theme Configurtion</h2>
<p>All of below options can be config in site folder <code>_config.Academia.yml</code></p>
<ul>
<li>Top Menu: in-page anchor, new page links or any links you like</li>
<li>Side Bar: Support avatar, social links, extra social links (optional), CV_download_link</li>
<li>Box-shadow mode (optional)</li>
</ul>
<p>All icons in page is supported with <a href="https://fontawesome.com/">font-awesome-5</a> (<s>font-awesome-4</s>)</p>
<blockquote>
<p>fontawesome-4 is not used since v1.2.1. If you want to update manually, first change CDN stylesheet to fa5. Then change your previous icon class <code>fa</code> to <code>fas</code> or <code>fas</code>.</p>
</blockquote>
<p>If you need rss feed, use hexo plugin: <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a></p>
<p><img src="https://raw.githubusercontent.com/PhosphorW/phower-img-folder/master/hexo-theme-academia_layout.png" alt="theme-layout" loading="lazy"></p>
<h2 id="Document"><a class="headerlink" href="#Document"></a>Document</h2>
<p>中文文档：<a href="https://phower.me/2020/03/Hexo-theme-academia-%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/">Hexo-Theme-Academia 说明文档</a></p>
]]></content>
      <tags>
        <tag>Example</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 教程导航</title>
    <url>/action-hexo/guide-how-to-build-site-0.html</url>
    <content><![CDATA[<h1>引言</h1>
<p>互联网时代，大家都想在浩瀚的网络世界留下点印记。</p>
<p>虽然有微信朋友圈，QQ空间，微博等可以记录点点滴滴，但他们要么是没法扩大圈子，要么是加以各种限制，到头来这些数据产权还都属于马家，更不用谈某天实现增值获取收益，寄人篱下终究不如自己做主：建个自己掌控的网站！</p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/hugo-hexo.png" alt="易网盟" loading="lazy"></p>
<h1>建站须知</h1>
<ol>
<li>虽然说是零基础建站，但<strong>一些互联网及计算机基本知识技能不能少</strong>，如文件和文件夹之别，路径区分，怎么安装软件，怎么复制粘贴，怎么输命令，怎么解析域名……</li>
<li>建站就需要准备文件托管服务，如上传到 <code>GitHub</code>/<code>Gitee</code> 仓库，自己买的云服务器，虚拟主机等</li>
<li>网站对外需要有IP或者域名（一般都不会直接IP对外服务），所以要么用 <code>GitHub</code>/<code>Gitee</code> 提供免费的二级域名，要么自行购买域名并解析到文件托管服务器，各种服务器优惠可以参考 <a href="https://www.wubase.com" title="云服务器评测，分享国内外VPS、网站服务器等资讯">网联基地</a></li>
<li>建站时会涉及各种配置设置，而且各程序，各主题都不尽相同，都需要根据实际对象依照文档进行配置，所以需要具备阅读文档的能力</li>
<li>使用过程中难免遇到问题，遇到问题需要看得懂输出信息，能够从输出信息中提取关键信息求助战略合作伙伴 <code>百度</code> 或 <code>Google</code> ，找站长也需要反馈有用的信息才能解决问题</li>
</ol>
<h1>教程目录</h1>
<p>本简版教程旨在试图引导小白快速上手 Hexo 建站框架，免费或者低成本建个自己的小站，部分工作已经完成的直接跳到后续需要的步骤开始看即可。</p>
<blockquote>
<p>本站内容支持按关键词搜索，不想一页页翻请 <strong><code>善用搜索和内容目录导航</code></strong></p>
</blockquote>
<ol>
<li>
<a href="/action-hexo/guide-how-to-build-site-1.html" title="从零开始建个小站 - 前置知识">从零开始建个小站 - 前置知识</a>
</li>
<li>
<a href="/action-hexo/guide-how-to-build-site-2.html" title="从零开始建个小站 - 建站方案选择">从零开始建个小站 - 建站方案选择</a>
</li>
<li>
<a href="/action-hexo/guide-how-to-build-site-3.html" title="从零开始建个小站 - 1. 搭个本地预览环境">从零开始建个小站 - 1. 搭个本地预览环境</a>
</li>
<li>
<a href="/action-hexo/guide-how-to-build-site-4.html" title="从零开始建个小站 - 2. 拉取仓库到本地">从零开始建个小站 - 2. 拉取仓库到本地</a>
</li>
<li>
<a href="/action-hexo/guide-how-to-build-site-5.html" title="从零开始建个小站 - 3. 搞个编辑器">从零开始建个小站 - 3. 搞个编辑器</a>
</li>
<li>
<a href="/action-hexo/guide-how-to-build-site-6.html" title="从零开始建个小站 - 4. 练手内容维护">从零开始建个小站 - 4. 练手内容维护</a>
</li>
<li>
<a href="/action-hexo/guide-how-to-build-site-7.html" title="从零开始建个小站 - 5. 个性化设置">从零开始建个小站 - 5. 个性化设置</a>
</li>
<li>
<a href="/action-hexo/guide-how-to-build-site-8.html" title="从零开始建个小站 - 其他知识">从零开始建个小站 - 其他知识</a>
</li>
<li>
<a href="/action-hexo/guide-how-to-build-site-9.html" title="从零开始建个小站 - 常见问题">从零开始建个小站 - 常见问题</a>
</li>
</ol>
<blockquote>
<p>从零开始的详细教程可参考：<a href="https://www.yiwangmeng.com/?p=226">从零开始建个小站</a>。</p>
</blockquote>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 前置知识</title>
    <url>/action-hexo/guide-how-to-build-site-1.html</url>
    <content><![CDATA[<h1>基本概念</h1>
<table>
<thead>
<tr>
<th>名词</th>
<th>解释说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>git</td>
<td>大名鼎鼎的分布式版本管理工具，每个版本改了什么一目了然</td>
</tr>
<tr>
<td>GitHub/Gitee</td>
<td>提供代码存储、托管，有免费的pages服务</td>
</tr>
<tr>
<td>pages</td>
<td>GitHub/Gitee都有的网页托管访问服务，每用户一个免费二级域名</td>
</tr>
<tr>
<td>npm</td>
<td>依赖包管理工具，各种套娃</td>
</tr>
<tr>
<td>MarkDown</td>
<td>轻量标记语言，写文档必备技能</td>
</tr>
<tr>
<td>服务器/云主机</td>
<td>存放文件24小时在线提供网络访问服务的计算机</td>
</tr>
<tr>
<td>域名</td>
<td>互联网上便于人类识别记忆的访问地址</td>
</tr>
<tr>
<td>ICP备案</td>
<td>大陆境内服务器需要，有问题方便FBI请喝茶或上门送温暖</td>
</tr>
<tr>
<td>主题/模板</td>
<td>套用后实展现相应的界面外观及功能</td>
</tr>
</tbody>
</table>
<h1>网站程序选型</h1>
<p>网站程序选型主要依据环境依赖程度和维护难度，以及网络上免费资源可持续性考虑，对大多数普通用户，建议：</p>
<ul>
<li>
<p>首选 <code>hugo、hexo...</code>：HTML静态页渲染框架，速度快，可免费托管到 <code>GitHub</code>/<code>Gitee</code> 等仓库，MarkDown 文档维护，主题多可满足大部分需求。<strong>大部分用户建议选择 Hexo 程序</strong>，框架结构清晰，用户内容复用性高，而且有几百套各式主题可选。</p>
<blockquote>
<p>虽然 <code>hugo</code> 程序本身无外部环境依赖，但是各主题制作大佬依然热衷引进 <code>npm</code> 、<code>go module</code> 套娃，而且内容通用性差，换个主题内容基本上就要重新调整，配置也几乎不通用，对新手或者想经常换花样的同学不够友好</p>
</blockquote>
</li>
<li>
<p>其次 <code>WordPress、typecho...</code>：需自备服务器及域名，基本上没有免费资源可用，但有后台界面，网络上用户多，插件多，文档教程多</p>
</li>
</ul>
<p>市面上网站程序比较多，罗列了几个比较主流的框架，更多可以自行通过搜索引擎查找对应文档。</p>
<table>
<thead>
<tr>
<th>程序框架</th>
<th>环境依赖</th>
<th>维护难度</th>
<th>推荐度</th>
<th>常见用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>hugo</td>
<td>/</td>
<td>★★</td>
<td>★★★★☆</td>
<td>个人网站，企业官网，在线文档，求职简历</td>
</tr>
<tr>
<td>hexo</td>
<td>nodejs</td>
<td>★★</td>
<td>★★★★★</td>
<td>个人网站，企业官网，在线文档，求职简历</td>
</tr>
<tr>
<td>gitbook</td>
<td>nodejs</td>
<td>★★★★</td>
<td>★★</td>
<td>在线文档</td>
</tr>
<tr>
<td>vuepress</td>
<td>nodejs</td>
<td>★★★★</td>
<td>★★★</td>
<td>个人网站，在线文档</td>
</tr>
<tr>
<td>docsy</td>
<td>nodejs</td>
<td>★★★★</td>
<td>★★★</td>
<td>在线文档</td>
</tr>
<tr>
<td>WordPress</td>
<td>MySQL，PHP</td>
<td>★★★</td>
<td>★★★★</td>
<td>个人网站，企业官网，商业网站</td>
</tr>
<tr>
<td>Typecho</td>
<td>MySQL，PHP</td>
<td>★★★☆</td>
<td>★★★☆</td>
<td>个人网站，企业官网</td>
</tr>
<tr>
<td>Zblog</td>
<td>MySQL/SQLite，PHP</td>
<td>★★★</td>
<td>★★★</td>
<td>个人网站，企业官网</td>
</tr>
</tbody>
</table>
<blockquote>
<p>PS：维护难度和推荐度都是主观意见，推荐度高主要是基于部署简单，可选主题多，互联网免费资源多，对最终实现的功能需求未做考虑，大部分情况根据自己实际需求考量。</p>
</blockquote>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 建站方案选择</title>
    <url>/action-hexo/guide-how-to-build-site-2.html</url>
    <content><![CDATA[<p>既然这是篇小白零基础建站教程，那么就不会涉及带门槛的方案，只是简单罗列了适合新手的案例，其他同等方案或者更复杂方案等熟悉了可以再自行研究。</p>
<span id="more"></span>
<h1>方案对比</h1>
<blockquote>
<p>免费托管仓库优先选择全球最大男性交友网站 GitHub，Gitee 需要实名认证及发布前内容审核</p>
</blockquote>
<h2 id="静态站：Hugo-Hexo-…-GitHub-Gitee-GitHub-Gitee免费二级域名-自备域名"><a class="headerlink" href="#静态站：Hugo-Hexo-…-GitHub-Gitee-GitHub-Gitee免费二级域名-自备域名"></a>静态站：<strong>Hugo/Hexo/… + GitHub/Gitee + GitHub/Gitee免费二级域名/自备域名</strong></h2>
<pre class="mermaid"> flowchart LR;
   本地维护MarkDown内容 -- hugo/hexo渲染 -->本地效果预览
   GitHub/Gitee仓库 -- 可绑定自备域名 --> pages对外访问
   本地维护MarkDown内容 <-- git同步 --> GitHub/Gitee仓库 -- 触发action自动渲染 --> pages对外访问</pre>
<ul>
<li>优点：网络上有免费资源「<strong>也可以部署到自有服务器</strong>」，静态页速度快，网站源文件通过 git 版本管理安全可靠不会丢，可免维护服务器</li>
<li>缺点：需要点 MarkDown 语法知识，缺免费的小白界面化管理后台，评论之类的功能需要引入第三方实现</li>
</ul>
<h2 id="动态站：WordPress-Typecho-…-自备服务器-自备域名"><a class="headerlink" href="#动态站：WordPress-Typecho-…-自备服务器-自备域名"></a>动态站：<strong>WordPress/Typecho/… + 自备服务器 + 自备域名</strong></h2>
<pre class="mermaid"> flowchart LR;
   自备域名 -- DNS解析 --> 自备服务器 --> 网站对外访问
   网站界面后台维护内容 --> 自备服务器 -- 大陆区服务器 --> ICP备案 --> 网站对外访问</pre>
<ul>
<li>优点：功能强大几乎能满足所有需求，装好后带后台，纯界面操作所见即所得</li>
<li>缺点：需要自己购买并维护服务器和域名，对服务器要求高，动态内容响应速度相对慢点</li>
</ul>
<h1>准备条件</h1>
<h2 id="静态站方案："><a class="headerlink" href="#静态站方案："></a>静态站方案：</h2>
<pre class="mermaid">flowchart TB;
静态站方案 --必须--> 注册GitHub/Gitee账号 & 安装Git客户端
注册GitHub/Gitee账号 --> 创建仓库 & 配置访问令牌
安装Git客户端 --编辑MarkDown源码--> 发布到GitHub/Gitee
静态站方案 --可选--> 安装本地环境 & 装个趁手的编辑器 & 购买域名
装个趁手的编辑器</pre>
<ol>
<li><strong>GitHub/Gitee账号</strong>：要使用免费的资源，得先注册个账号。国内 Gitee 也有，但绑定自己的域名要收费，而且内容要审核，所以<strong>没特殊需求建议用前世界首富家的 GitHub</strong>。当然，你有自己服务器和域名也可以用来替代，国内外各种高性价比服务器可以参考 <a href="https://www.wubase.com" title="云服务器评测，分享国内外VPS、网站服务器等资讯">网联基地</a>。</li>
<li><strong>Git客户端</strong>：用来同步管理源代码，改了什么一目了然</li>
<li><strong>MarkDown 编辑器</strong>：纯手工敲代码是不可能的，借助编辑器事半功倍，而且还能和 Git 结合，大大降低难度</li>
<li><strong>域名「可选」</strong>：花点小钱占个自己的域名赏心悦目，也好打响自己的品牌，万一哪天走了张<a href="/" title="微博在2010年耗资800万收购 weibo.com">伟波</a>的运呢？</li>
</ol>
<h2 id="动态站方案："><a class="headerlink" href="#动态站方案："></a>动态站方案：</h2>
<pre class="mermaid">flowchart LR;
动态站方案 --必须--> 购买域名 & 购买服务器
购买域名 --解析域名到服务器IP--> 安装环境并部署网站
购买服务器 --大陆区服务器--> ICP备案
购买服务器 --> 安装环境并部署网站 & 后台内容管理</pre>
<ol>
<li><strong>域名</strong>：虽然也有免费的，但还是建议花钱买，每年几十元</li>
<li><strong>服务器/云主机/虚拟主机</strong>：需要带数据库，支持PHP，Java等及安装依赖扩展</li>
<li><strong>ICP备案</strong>：如果用大陆区服务器，必须先工信部ICP备案后才可用，大约需耗时6周</li>
</ol>
<script type="text/javascript" async
  src="https://cdn.staticfile.org/mermaid/9.1.1/mermaid.min.js">
</script>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 1. 搭个本地预览环境</title>
    <url>/action-hexo/guide-how-to-build-site-3.html</url>
    <content><![CDATA[<p>如果你选择的是自备服务器的付费动态网站方案，那么直接在服务器上安装环境部署网站程序即可，本文不做演示，下文只针对免费静态站方案进行详细说明。</p>
<p>其实官方默认自带的 <code>hello world</code> 示例就告知了基本的用法，要把细枝末节展开来还能再写一本书，本教程也只是针对本站部署的方案，给新手演示一个大概的操作流程，更多细节或者高深玩法请在熟悉后自行发掘。</p>
<span id="more"></span>
<p>虽然也能在线增删改文件，但还是建议拉取仓库到本地电脑进行操作。在本地电脑操作，就有必要搭个本地预览环境。</p>
<blockquote>
<p>以下以 Windows 系统环境演示，其他操作系统请打开系统终端 terminal 直接输对应的命令</p>
</blockquote>
<blockquote>
<p>到以下涉及软件官网下载如果速度慢，可以从 <a href="https://registry.npmmirror.com/binary.html">墙内淘宝源下载</a>。</p>
</blockquote>
<h1>1.1 安装 Git 客户端</h1>
<p>仓库文件管理借助大名鼎鼎的代码项目管理工具，到 <a href="https://git-scm.com/downloads">Git-SCM官网</a> 或者 <a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/" title="Windows版，其他系统自带或直接命令安装">墙内淘宝源</a> 下载安装包或者软件源默认安装完成即可。</p>
<p>Windows 系统安装完成后，会在右键菜单添加 <code>Git Bash Here</code> 入口，方便后续使用。</p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/git_menu_gitbashhere.png" alt="Git Bash Here" loading="lazy"></p>
<p>如果以前未使用过 Git，一般都需要设置用户名和邮箱，随便一个目录空白地方 点右键》 <code>Git Bash Here</code> ，运行以下命令设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name name <span class="comment">#设置Git用户名</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email&quot;</span> <span class="comment">#设置Git邮箱</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里只是最基本的Git信息设置，后续提交同步 GitHub 等需要额外授权，详见站内后文：<a href="/action-hexo/guide-how-to-build-site-4.html" title="从零开始建个小站 - 2. 拉取仓库到本地">从零开始建个小站 - 2. 拉取仓库到本地</a></p>
</blockquote>
<p><code>Git Bash Here</code> 这个右键菜单，在哪个目录下点就会将工作路径自动切换到哪，可以省去切换工作路径的麻烦，小白可以多用用。</p>
<h1>1.2  安装 nodejs</h1>
<p><code>nodejs</code> 是跨平台的 JavaScript 运行环境和包管理工具。同样的，到 <a href="https://nodejs.org/zh-cn/">Nodejs官网</a> 或者 <a href="https://registry.npmmirror.com/binary.html?path=node/">墙内淘宝源</a> 下载安装包，建议选择长期维护版，默认安装完成即可。</p>
<p>安装完成后，在前文安装完成的 <code>Git Bash</code> 或者系统终端中输入命令 <code>npm version</code> 验证安装结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ npm version</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  npm<span class="punctuation">:</span> &#x27;<span class="number">8.5</span><span class="number">.5</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">  node<span class="punctuation">:</span> &#x27;<span class="number">16.15</span><span class="number">.0</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">  ……</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>为了后面安装依赖包顺利完成，运行以下命令设置 npm 墙内源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 npm 墙内源，加快网络下载速度，墙外就不要做了</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com <span class="comment"># 最新淘宝源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry http://mirrors.cloud.tencent.com/npm/ <span class="comment"># 腾讯源</span></span><br></pre></td></tr></table></figure>
<h1>1.3 安装 hexo</h1>
<p>前文安装完成 <code>npm</code> 包管理器后，就可以安装 <code>hexo</code> 预览客户端了，打开前文安装完成的 <code>Git Bash</code> 或者系统终端，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 系统全局安装hexo，方便从零开始</span></span><br><span class="line"><span class="comment"># macOS 或 Linux 非 root 用户登录需要 sudo 权限运行</span></span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装完成后可使用命令 <code>hexo version</code> 验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br><span class="line">INFO  Validating config</span><br><span class="line">hexo: 6.2.0</span><br><span class="line">hexo-cli: 4.3.0</span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<p>macOS新版本默认启用的是 <code>zsh</code> 终端，<code>hexo</code> 安装完成后并未添加到 <code>zsh</code> 能识别的系统变量，会出现提示 <code>zsh: command not found: hexo</code> 的情况，可添加系统变量解决，具体方法请求助战略合作伙伴 Google和百度，或者就此烂过。</p>
<blockquote>
<p>也可以 <a href="https://support.apple.com/zh-cn/guide/terminal/trml113/mac">将系统默认终端改成 <code>bash</code></a>，或者使用后文提到的 VSCODE 集成终端，将 VSCODE 调用默认终端改成 <code>bash</code>，然后在 VSCODE 集成终端运行命令即可。</p>
</blockquote>
<p>至此，网站预览所需要的系统环境就准备完成。</p>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 2. 拉取仓库到本地</title>
    <url>/action-hexo/guide-how-to-build-site-4.html</url>
    <content><![CDATA[<p>前面的准备工作已完成，剩下就是将仓库文件克隆同步到本地电脑，方便后续维护与预览。</p>
<span id="more"></span>
<h1>2.1 git clone</h1>
<blockquote>
<p>本站方案 <code>只需要维护私有源码仓库</code>，所以只需要将 <code>私有源码仓库</code> 克隆到本地使用即可，网页会自动发布到对外展示服务仓库对应分支，用户名和对外展示仓库不删不改就行。</p>
<p>如果改了 GItHub 用户名，请参考 <a href="/action-hexo/guide-how-to-build-site-9.html" title="从零开始建个小站 - 常见问题">从零开始建个小站 - 常见问题</a> 中 <code>要修改网址怎么办</code> 中提及项做相应修改。</p>
</blockquote>
<p>还是在 <code>Git Bash</code> 中，输入这样的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> d:\GitHub   <span class="comment">#先切换到存放本地文件的路径</span></span><br><span class="line">git <span class="built_in">clone</span> --recurse-submodules 源码仓库地址 <span class="comment">#带子模块一起克隆到本地</span></span><br></pre></td></tr></table></figure>
<p>如果第一次克隆时未带 <code>--recurse-submodules</code> 参数或者没有完整完成，可以 <code>在源码仓库根目录路径下</code> 运行以下命令继续完成子模块更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#请在仓库根目录路径下运行以下命令</span></span><br><span class="line">git submodule init &amp;&amp; git submodule update</span><br></pre></td></tr></table></figure>
<p>以上命令中请将 <code>源码仓库地址</code> 换成自己的源码仓库实际地址，建议从仓库页面上复制。</p>
<p>仓库地址获取方法：打开源码仓库主页》在文件列表右上方有个 <code>Code</code> ，点击下拉复制，如下图所示可选择 <code>HTTPS</code>「首选」 或 <code>SSH</code>：</p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/github_clone_https_url.png" alt="获取项目仓库地址" loading="lazy"></p>
<div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">HTTPS</button><button type="button" class="tab">SSH</button></div><div class="tab-contents"><div class="tab-item-content active"><p>第一次使用 GitHub 账号需要授权，默认会有如下图授权提示弹窗，选择从浏览器登录授权，打开浏览器后按提示输入账号密码登录后点击授权，直到出现授权成功的提示就表示授权成功。</p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/github-auth-connect.png" alt="连接GitHub账号授权" loading="lazy"></p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/git-repo-authentication.jpg" alt="浏览器登录授权成功" loading="lazy"></p>
<blockquote>
<p>如果由于网络原因，<code>HTTPS</code> 协议无法拉取/推送仓库，可尝试使用 <code>SSH</code> 协议</p>
</blockquote>
<blockquote>
<p><strong>已拉取的仓库修改协议</strong>：用文本编辑器打开仓库目录下的 <code>.git/config</code> 修改对应 <code>url = 复制的仓库地址</code> ，别修改错了！</p>
<p>如果涉及到<strong>管理有修改权限的</strong> <code>submodules</code>，也请在 <code>.gitmodules</code> 中将子模块项目一并修改为 <code>SSH</code> 地址</p>
</blockquote></div><div class="tab-item-content"><p>如果要使用 <code>SSH</code> 协议链接，需要先配置 <code>SSH</code> 连接密钥。当前 GitHub 强制用户使用超长随机串密码，需要遵循规则使用 <code>SHA-2</code> 签名规则密钥。</p>
<div style="padding: 15px; border: 1px solid transparent; border-color: transparent; margin-bottom: 20px; border-radius: 4px; color: #8a6d3b;; background-color: #fcf8e3; border-color: #faebcc;">
<strong>注意：</strong> 
<p>2021年8月14号开始，GitHub弃用账密验证Git操作，改用token或SSH密钥</p>
<p>GitHub 在 2022 年 3 月 15 日通过删除较旧的不安全密钥类型提高了安全性，不再支持 DSA 密钥 (<code>ssh-dss</code>)。</p>
<p>在 2021 年 11 月 2 日之前 <code>valid_after</code> 的 RSA 密钥 (<code>ssh-rsa</code>) 可以继续使用任何签名算法。 在该日期之后生成的 RSA 密钥必须使用 SHA-2 签名算法。 某些较旧的客户端可能需要升级才能使用 SHA-2 签名。</p></div>
<h2 id="生成-SSH-密钥对"><a class="headerlink" href="#生成-SSH-密钥对"></a>生成 SSH 密钥对</h2>
<p>打开 <code>Git Bash Here</code> 或者系统终端，通过以下命令生成私钥和公钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成密钥对，一路回车默认即可</span></span><br><span class="line"><span class="comment"># 如已有其他密钥对在用，自己改下生成的文件名以防覆盖</span></span><br><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;Your_Email&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果您使用的是不支持 <code>ed25519</code> 算法的旧系统，请使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;Your_Email&quot;</span></span><br></pre></td></tr></table></figure>
<p>更多密钥相关详细信息可参阅 <a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">GitHub官方文档</a></p>
<p>如果你是一路回车生成密钥对，那么生成的密钥对会保存在：<code>~/.ssh/</code> 目录下，<code>~</code> 表示用户目录，如操作系统登录用户名是 <code>xyz</code> ，那么在 Windows 下路径一般为 <code>C:\Users\xyz\.ssh</code> ，macOS/Linux下路径为 <code>/home/xyz/.ssh</code> ，其中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/.ssh/id_ed25519 //私钥，保存在本地</span><br><span class="line">~/.ssh/id_ed25519.pub //公钥，配置到远端</span><br></pre></td></tr></table></figure>
<p>至此，本地 Git 认证环境已准备妥当，下一步将公钥配置到 GitHub 中就能使用了。</p>
<h2 id="配置到-GitHub"><a class="headerlink" href="#配置到-GitHub"></a>配置到 GitHub</h2>
<p>为了使用方便，直接给 GitHub 添加一个用户密钥，一个密钥可作用于整个账号的增删改查操作。</p>
<ol>
<li>
<p>将 SSH 公钥内容复制到剪贴板「假设都按前面的默认操作」</p>
 <details open><summary>Windows</summary>
<p>打开 <code>Git Bash Here</code> ，复制粘贴如下命令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_ed25519.pub</span><br><span class="line">//该命令自动将公钥存到剪贴板，直接用文本编辑器打开公钥再复制也是一样的</span><br></pre></td></tr></table></figure>
 </details>
 <details><summary>macOS/Linux</summary>
<p>打开 <code>Terminal</code>（终端），复制粘贴如下命令：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_ed25519.pub</span><br><span class="line">// 执行完将打印出来的公钥内容完整复制待用</span><br></pre></td></tr></table></figure>
 </details>
</li>
<li>
<p>登录GitHub账号后，在任何页面的右上角，单击右上角个人资料照片，然后单击弹出下拉中的 <code>Settings（设置）</code></p>
</li>
<li>
<p>选择左侧 <code>Access</code>》 点击 <code>SSH and GPG keys</code>，点击 <code>New SSH key（新 SSH 密钥）</code></p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/github_set_access_new_ssh.png" alt="Add New SSH key" loading="lazy"></p>
</li>
<li>
<p>在 <code>Title</code>（标题）字段中，为新密钥添加描述性标签便于识别用途。 例如，如果您使用在个人Mac上，此密钥名称可能是 <code>Personal MacBook</code>。</p>
</li>
<li>
<p>将前面复制的公钥串粘贴到 <code>Key</code>（密钥）字段</p>
<p><img src="https://docs.github.com/assets/cb-24796/images/help/settings/ssh-key-paste.png" alt="粘贴公钥串" loading="lazy"></p>
</li>
<li>
<p>最后点击 <code>Add SSH key（添加 SSH 密钥）</code> 完成添加</p>
</li>
</ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>
<h1>2.2 安装依赖包</h1>
<p>仓库中只包含网站必须的内容源码文件，一些依赖包文件是忽略提交的，所以本地需要重新安装，在仓库 <code>根目录路径下</code> 运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>以上命令实际上是下载 <code>package.json</code> 中定义好的依赖包，等依赖包下载完成，整个本地预览环境就全部安装完成了。</p>
<h1>2.3 预览测试</h1>
<p>在仓库 <code>根目录路径下</code> 运行 <code>hexo server</code> 即可启动预览服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user@IAY MINGW64 /d/Git/action-hexo (main)</span><br><span class="line">$ hexo s</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>以上输出信息中，<code>/d/Git/action-hexo (main)</code> 就是所谓 <code>运行路径</code> ，Windows系统表示 <code>d:\Git\action-hexo</code> 目录，当前在 <code>main</code> 分支。</p>
<p>浏览器中打开 <code>http://localhost:4000</code> 就可以预览，按 <code>Ctrl+C</code> 组合键停止预览服务，一些主题或者网站设置变更需要重启该预览服务才能看到效果。</p>
<h1>2.4 用得到的命令</h1>
<ol>
<li><code>hexo server</code> ：开启本地预览服务，默认端口 <code>4000</code>，可以添加 <code> -p port</code> 指定预览端口，<code>Ctrl + C</code> 关闭，一些网站更改需要重启预览才能看到效果</li>
<li><code>hexo new &quot;postName&quot;</code> ：新建文章，<code>postName</code> 不建议是中文，也不要添加特殊符号，生成MarkDown 文件在 <code>source/_post</code> 目录下，<code>hexo new</code> 默认新生成的就是 <code>post</code> 类型</li>
<li><code>hexo new page &quot;pageName&quot;</code> ：新建页面，会在 <code>source</code> 目录下生成 <code>pageName</code> 文件夹及对应 <code>index.md</code></li>
</ol>
<p>上面用到的命令对应缩写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s == hexo server</span><br><span class="line">hexo n == hexo new</span><br></pre></td></tr></table></figure>
<p>更多命令可自行学习</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 3. 搞个编辑器</title>
    <url>/action-hexo/guide-how-to-build-site-5.html</url>
    <content><![CDATA[<p>工欲善其事必先利其器，一个好用的编辑器可以事半功倍。</p>
<span id="more"></span>
<h1>3.1 下载安装编辑器</h1>
<p>VSCODE 就是个不错的选择，自行到 <a href="https://code.visualstudio.com/download">微软官方网站</a> 去下载安装。</p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/vscode-hexo.png" alt="VSCODE" loading="lazy"></p>
<p>VSCODE 是当前最流行的编辑器，免费开源，专业和业余都能胜任：</p>
<ol>
<li>全目录管理，一个界面可以管理整个目录下的文件</li>
<li>语法格式显示，也能实时预览</li>
<li>与 Git 集成，可以界面化操作 Git 提交同步，比较等</li>
<li>集成命令终端，预览调试方便</li>
</ol>
<p>VSCODE 可以在当前界面直接调出命令行终端，方便输入命令使用：</p>
<p>启动 <code>VSCODE</code> ，Windows 版可以通过快捷 <code>CTRL+~</code> 或者菜单 <code>Terminal》New Terminal（新建终端）</code></p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/vscode_new_terminal.png" alt="新建终端" loading="lazy"></p>
<p>该终端默认使用系统终端，功能上有些许差异，建议设置默认终端为 <code>Git Bash</code>，方法：点击终端窗口右上角 ➕ 右侧的 <code>下拉箭头</code></p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/vscode-set-terminal-defalt.png" alt="设置默认终端" loading="lazy"><br>
<img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/vscode-set-terminal-git.png" alt="选择Git Bash" loading="lazy"></p>
<blockquote>
<p>如果 VSCODE 调出的终端无法运行 <code>npm</code> 或者 <code>hexo</code> 命令，那么请直接使用 <code>Git Bash Here</code> 终端即可，或者自己去添加对应系统变量解决。</p>
</blockquote>
<p>其他如 Atom、Sublime Text、Typroa 之类的编辑器也都可以，甚至是专业的代码编辑器请自行研究。</p>
<h1>3.2 文件一站式管理</h1>
<p>VSCODE 可以很方便地对网站进行管理：</p>
<p>克隆完成后，通过快捷方式 <code>Ctrl+K Ctrl+O</code> 或者菜单 <code>File（文件）》Open Folder（打开文件夹）</code> 打开刚克隆完的仓库目录。</p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/vscode_markdown_editor.png" alt="打开文件夹" loading="lazy"></p>
<p>至此，我们就可以在 <code>vscode</code> 中便捷地增删改网站源文件了。</p>
<blockquote>
<p>文件修改后，请<code>记得要保存</code>，<code>记得要保存</code>，<code>记得要保存</code>，保存文件的快捷键：<code>Ctrl+S</code></p>
</blockquote>
<h1>3.3 界面化 Git 操作简单演示</h1>
<p>VSCODE 很好地集成了Git操作，在我们增删改文件后，可以直接在编辑器界面与 Git 仓库提交同步：<br>
<img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/vscode-git.png" alt="Git操作界面概览" loading="lazy"></p>
<blockquote>
<p><strong>点 <code>commit</code> 前请务必填写 <code>message</code> ，告知后来人改了什么，为什么会有这次变更，这是 Git 版本管理基本规范</strong></p>
</blockquote>
<p>提交只是本地操作，要同步到外网，还需要进一步 <strong>推送或同步</strong> ，界面上有好几处 <code>同步</code> 、<code>push</code> 等功能按钮，或者直接点 VSCODE 窗口左下角状态栏上 🔄 即可完成Git数据同步。</p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/github-sync.png" alt="Git同步状态" loading="lazy"></p>
<blockquote>
<p>上图中 <code>🔄 0↓ 1↑</code> 表示有 0 个变更待拉取/下载，有 1 个变更待推送/上传</p>
</blockquote>
<p>如果想一次性完成提交和推送，可以在填写完变更信息后，点击提交右侧的下拉按钮选择提交并推送。</p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/vscode-git-push.png" alt="Git提交并推送" loading="lazy"></p>
<p>VSCODE 界面上其他按钮功能可以将鼠标移动到对应图形上方悬停一下，然后就会有功能提示了，请自行查阅并使用。基本的演示如动图：</p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/vscode-git-commit.gif" alt="简单的Git提交演示" loading="lazy"></p>
<p>直接填写变更说明提交表示把所有变更提交，如果只想提交指定某个文件，那么如上图所示，点击变更文件后面的 <code>＋</code> 单独暂存变更并提交，其他未暂存变更的文件不会被提交。</p>
<p>第一次使用时会提示是否直接提交等提示，请正确选择是、总是、允许……等。</p>
<blockquote>
<p>推送到仓库需要授权，如果是 <code>SSH</code> 协议仓库地址，还需要先正确配置 <code>SSH</code> 密钥，方法请见 <a href="/action-hexo/guide-how-to-build-site-4.html" title="从零开始建个小站 - 2. 拉取仓库到本地">从零开始建个小站 - 2. 拉取仓库到本地</a> 中相关章节。</p>
</blockquote>
<p>更多操作建议去学习下 Git 基础知识，可求助我们的战略合作伙伴 Google 和百度。</p>
<p>虽然项目仓库主页直接增删改文件都可以，但网页上只能一个一个文件操作，建议还是同步到本地使用，借助编辑器事半功倍，也相当于多了个源码本地备份。</p>
<blockquote>
<p>如果不是使用本站的仓库自动渲染方案，项目可能不是 Git 管理方式，在 vscode 中将显示不是 Git 仓库</p>
</blockquote>
<h1>3.4 推荐插件</h1>
<p>作为 MarkDown 编辑器和文件管理器，建议安装以下插件：</p>
<ol>
<li><code>Git History</code>/<code>Git Graph</code>：界面化查看及管理 Git 提交记录</li>
<li><code>Markdown All in One</code>：MarkDown 预览及一些快捷方式</li>
<li><code>Markdown Preview Mermaid Support</code>：MarkDown 流程图、时序图等渲染支持</li>
<li><code>Markdown Table</code>：快速插入 MarkDown 表格或者转换成表格代码</li>
<li><code>Markdown Shortcuts</code>：MarkDown 各种语法快捷方式</li>
</ol>
<p>其他有用的插件请自行探索。</p>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 4. 练手内容维护</title>
    <url>/action-hexo/guide-how-to-build-site-6.html</url>
    <content><![CDATA[<p>本实操仅针对 <a href="/action-hexo/guide-how-to-build-site-2.html" title="从零开始建个小站 - 建站方案选择">建站方案选择</a> 中提及的免费静态站方案：<strong>hugo/hexo + GitHub + GitHub免费二级域名/自备域名</strong> ，另外的付费动态站方案自带网站后台，界面化的一体操作没什么好演示的，如有需要可求助我们的战略合作伙伴Google和百度。</p>
<p>针对 GitHub 仓库版方案，我们 <strong><code>只需要对私有源码仓库</code></strong> 做两件事：<code>增/删/改</code> --&gt; <code>Git提交同步</code></p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/github-zsg.png" alt="内容增删改" loading="lazy"></p>
<ul>
<li>增：新增文章、页面、图片等</li>
<li>删：删除文章、页面、图片等</li>
<li>改：对已有的文章、页面、配置等进行修改</li>
</ul>
<blockquote>
<p><strong>除非你会，否则不要动主题目录下任何东西</strong>，主题功能只需要按主题文档修改 <code>_config.主题名.yml</code> 中配置即可。</p>
</blockquote>
<blockquote>
<p><strong>除非你会，否则不要动主题目录下任何东西</strong>，主题功能只需要按主题文档修改 <code>_config.主题名.yml</code> 中配置即可。</p>
</blockquote>
<blockquote>
<p><strong>除非你会，否则不要动主题目录下任何东西</strong>，主题功能只需要按主题文档修改 <code>_config.主题名.yml</code> 中配置即可。</p>
</blockquote>
<p>使用本站提供的项目仓库自动方案，提交源代码后，会自动触发渲染发布，然后需静待上端网络缓存更新后才看到最新结果。</p>
<p>强调三点：</p>
<ol>
<li>所有的增删改都需要同步到上端仓库后网络上才能看到变更！！！</li>
<li>所有的增删改都需要同步到上端仓库后网络上才能看到变更！！！</li>
<li>所有的增删改都需要同步到上端仓库后网络上才能看到变更！！！</li>
</ol>
<h2 id="4-1-新建文章"><a class="headerlink" href="#4-1-新建文章"></a>4.1 新建文章</h2>
<p>新建文章或页面可以通过新建命令或者复制已有范本后再修改，<strong>任意方式都可以</strong>，只要最终<strong>生成符合规则的MarkDown文档</strong>即可。</p>
<h3 id="方式一：hexo-n-文件名"><a class="headerlink" href="#方式一：hexo-n-文件名"></a>方式一：<code>hexo n</code> 文件名</h3>
<p>命令方式新建文章或页面，那必定需要在命令终端内执行，<code>hexo n</code> 是 <code>hexo new post</code> 的简写命令。</p>
<p>打开命令行终端，输入：<code>hexo n post-name</code> ，如：<code>hexo n just-a-test</code> ，就会在 <code>source/_post</code> 目录下生成一个名称为 <code>just-a-test.md</code> 的文件，这就是新文章的 MarkDown 源码了。</p>
<blockquote>
<p>生成的新文章MarkDown源码文件名称不建议含有特殊符号、汉字</p>
</blockquote>
<p>打开源码文件就能看到自动生成了文章标题等基本的 <code>Front-matter</code> 信息，文章标题等按自己的实际内容编写修改。</p>
<h3 id="方式二：复制已有再修改"><a class="headerlink" href="#方式二：复制已有再修改"></a>方式二：复制已有再修改</h3>
<p><code>复制已有</code> 就是字面意思，不用打开命令行终端输命令，直接到 <code>source/_post</code> 目录下找个已存在的 MarkDown 文件，如：把网站自带的 <code>hello-world.md</code> 这个文件<strong>复制一份改名</strong>为 <code>new-post.md</code> ，然后打开该源码文件，把标题，日期等信息按实际内容需求改好，填充新内容就成了。</p>
<h2 id="4-2-格式！格式！"><a class="headerlink" href="#4-2-格式！格式！"></a>4.2 <strong>格式！格式！</strong></h2>
<p>前文新建文章或页面说明都提到了需要遵循格式。</p>
<p>一个MarkDown 源码文件，除了 <code>Front-matter</code> 头部信息，其他的就是基本的 MarkDown 语法，MarkDown 语法是页面内容展示，错误与否都只是关系到展示内容样式，而 <code>Front-matter</code> 则直接关系到 hexo 能不能把 MarkDown 源码文件正确渲染成 HTML ，所以遵循正确的 <code>Front-matter</code> 至关重要。</p>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/hexo-edit.gif" alt="新建文章示例" loading="lazy"></p>
<p>不管是Hugo还是Hexo，他们都只是一种渲染框架，所以MarkDown源代码都需要特定的 <code>Front-matter</code> 标记，也就是两行 <code>---</code> 中间的那段。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#x27;网页模板 pug 基本语法&#x27;</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">学编程</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">博客建站</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-12-10 15:22:57</span></span><br><span class="line"><span class="attr">updated:</span> <span class="number">2021-12-10 15:22:51</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;pug原名jade，因版权问题更名为pug，即哈巴狗。如果 `Front-matter` 内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">有跨行或特殊符号等，请用英文引号包起来，就如本段示例。&#x27;</span></span><br><span class="line"><span class="attr">top:</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">这里开始就是正文内容了……</span></span><br></pre></td></tr></table></figure>
<p>以上示例是 Hexo 程序的 <code>Front-matter</code> 头部信息，其中一些设置项也需要对应的主题支持，如果不是 Hexo 基础 <code>Front-matter</code> ，具体需要添加什么根据主题文档来。</p>
<blockquote>
<p>注意：每一个参数的 : 或者 - 后，都需要至少留一个空格，如果不填值就无所谓，或者将参数行删除都行，就是不能不留空格直接写，否则会报错，格式有错误时 VSCODE 也会显色提示，请留意。</p>
</blockquote>
<p><code>Front-matter</code> 基础配置项可见：</p>
<ol>
<li><a href="https://gohugo.io/content-management/front-matter/">Hugo-Front-Matter</a></li>
<li><a href="https://hexo.io/zh-cn/docs/front-matter">Hexo-Front-matter</a></li>
</ol>
<p>在完成了 <code>Front-matter</code> 信息设定后，我们就可以在第二个 <code>---</code> 行下方填充自己想要的内容。内容书写格式默认使用 MarkDown 语法，你直接写 HTML 代码也行，甚至你可以不顾语法当记事本或者Word写是没问题的，无非就是少了些格式样式。</p>
<blockquote>
<p>MarkDown 语法边用边学都没问题，本来就没几个语法，可参考 <a href="/action-hexo/guide-how-to-build-site-8.html" title="从零开始建个小站 - 其他知识">从零开始建个小站 - 其他知识</a> 中 <code>MarkDown语法</code> 章节</p>
</blockquote>
<h2 id="4-3-提交同步数据"><a class="headerlink" href="#4-3-提交同步数据"></a>4.3 提交同步数据</h2>
<p>对于增删改后的内容，我们可以启动本地预览查看效果，没问题了再通过 Git 提交并推送到上端仓库，静待上端渲染及刷新完缓存就能看到最终结果了。</p>
<blockquote>
<p>本地预览方法请参见 <a href="/action-hexo/guide-how-to-build-site-4.html" title="从零开始建个小站 - 2. 拉取仓库到本地">从零开始建个小站 - 2. 拉取仓库到本地</a> 中 <code>预览测试</code> 章节内容</p>
</blockquote>
<blockquote>
<p>Git 提交同步数据可用命令行，也可以使用 VSCODE 集成的界面化操作，详情请参考：<a href="/action-hexo/guide-how-to-build-site-5.html" title="从零开始建个小站 - 3. 搞个编辑器">从零开始建个小站 - 3. 搞个编辑器</a></p>
</blockquote>
<h2 id="4-4-使用快速模板"><a class="headerlink" href="#4-4-使用快速模板"></a>4.4 使用快速模板</h2>
<p>在熟悉了 Hexo 的基础用法后，有些内容是制式固定的，或者想偷个懒一次性都添加好默认内容，那么我们就可以借助自定义快速模板来完成。</p>
<p>在使用 <code>hexo n</code> 命令新建文章时，其实是遵循模板规则。打开 <code>scaffolds</code> 目录，可见有文章，页面等模板文件，打开源码可见如下内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125; <span class="string">//自动替换标题</span></span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125; <span class="string">//创建时间</span></span><br><span class="line"><span class="attr">tags:</span>	<span class="string">//没内容就留空，但该</span> <span class="attr">tags:</span> <span class="string">项会创建</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>比如在 <code>post.md</code> 添加新内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125;</span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">Linux</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">Windows</span></span><br><span class="line"><span class="attr">top:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>那么，在 <code>hexo n post just-a-test</code> 命令执行后，生成的新文章默认就会带上新加内容，其他用法以此类推。</p>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 5. 个性化设置</title>
    <url>/action-hexo/guide-how-to-build-site-7.html</url>
    <content><![CDATA[<p>项目仓库克隆下来，网站的各项设置都是默认的，一些标题，作者之类的需要根据自己的实际情况进行修改，个性设置主要是网站根目录的网站基础配置和主题配置。</p>
<p>好在 <code>hugo</code> 和 <code>hexo</code> 配置结构大同小异，而且都支持将配置文件放在网站根目录下，只需要修改配置，今后主题更新只需要同步配置其他也互不影响。</p>
<span id="more"></span>
<h1>5.1 认识文件</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">action-hexo    <span class="comment">#hexo程序工作目录</span></span><br><span class="line">|   README.md <span class="comment">#说明文档</span></span><br><span class="line">|   .gitignore  <span class="comment">#指定Git提交时忽略的文件规则</span></span><br><span class="line">|   package.json  <span class="comment">#依赖包记录，不要动</span></span><br><span class="line">|   _config.yml  <span class="comment">#网站基础配置文件，定义网站标题，作者等</span></span><br><span class="line">|   _config.fluid.yml  <span class="comment">#fluid这个主题的配置文件，来源于且优先级高于主题目录下的_config.yml</span></span><br><span class="line">|</span><br><span class="line">+---node_modules  <span class="comment">#hexo的依赖环境，不要动，一般都会添加到.gitignore忽略</span></span><br><span class="line">+---scaffolds  <span class="comment">#文章/页面/草稿模板，不会就不要动</span></span><br><span class="line">|</span><br><span class="line">+---<span class="built_in">source</span>  <span class="comment">#网站内容根目录，网络路径为：/</span></span><br><span class="line">|   favicon.ico <span class="comment">#网站图标，网络路径为：/favicon.ico</span></span><br><span class="line">|   \---images  <span class="comment">#自建文件夹用来放图片资源，网络路径为：/images</span></span><br><span class="line">|   |   GoodHexo.png  <span class="comment">#/images下的图片，引用地址为：/images/GoodHexo.png，也可以相对路径：../images/GoodHexo.png</span></span><br><span class="line">|   \---_posts  <span class="comment">#你所有的文章都存在这个目录底下</span></span><br><span class="line">|   |   hello-world.md  <span class="comment">#示例文章源文件，该MarkDown文件会被hexo渲染成HTML页发布</span></span><br><span class="line">|   \---about  <span class="comment">#自建的一个叫 about 的页面目录</span></span><br><span class="line">|   |   index.md  <span class="comment">#about 页面内容，网络路径为：/about/</span></span><br><span class="line">|   |</span><br><span class="line">+---themes  <span class="comment">#主题存放目录</span></span><br><span class="line">|   \---landscape <span class="comment">#默认主题</span></span><br><span class="line">|   \---butterfly <span class="comment">#本地另一个主题</span></span><br><span class="line">|   \---fluid <span class="comment">#本地另一个主题</span></span><br><span class="line">|   |</span><br></pre></td></tr></table></figure>
<p><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/hexo-files-tree.png" alt="认识hexo文件" title="Hexo 项目文件结构" loading="lazy"></p>
<h1>5.2 网站设置</h1>
<p>从上文可知，网站基础配置需要在 <code>hexo程序工作目录</code> 中的 <code>_config.yml</code> 进行配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">易网盟</span> <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;专注网站建设优化&#x27;</span> <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;Hexo + GitHub免费仓库托管方案，微软不倒，羊毛到老！&#x27;</span> <span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">静态网站</span>  <span class="comment">#网站关键词，不是所有的主题都支持</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">易网盟</span>  <span class="comment">#作者</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> <span class="comment">#时区，一般中国时区</span></span><br><span class="line"><span class="comment"># language: en  #网站语言，默认 en，请根据主题文档设置</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://yiwangmeng.cn</span> <span class="comment"># 网址必须以 http[s]:// 开头，没有自己的域名就用免费 username.github.io</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title.html</span> <span class="comment">#链接发布格式</span></span><br></pre></td></tr></table></figure>
<p>打开查看内容就能知道大概了，都有对应的注释，请根据自己实际情况修改填写，或者可以参阅 <a href="https://hexo.io/docs/configuration.html">官方配置文档</a>。</p>
<blockquote>
<p>如果网站网址是配置自有域名，请在域名解析托管商添加对应 <code>CNAME</code> 解析，可参考：<a href="/action-hexo/guide-how-to-build-site-9.html" title="从零开始建个小站 - 常见问题">从零开始建个小站 - 常见问题</a> 中相关章节：<code>要修改网址怎么办</code>。</p>
</blockquote>
<h1>5.3 主题设置</h1>
<p>首先在上文 <a href="#5-2-%E7%BD%91%E7%AB%99%E8%AE%BE%E7%BD%AE">网站设置</a> 中切换启用自己喜欢的主题，行首以 <code>#</code> 开头表示注释掉了不启用：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions </span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment"># 只能启用1个主题，启用后本地使用 `hexo server` 命令即可启动预览服务进行预览</span></span><br><span class="line"><span class="comment"># 切换主题后如果预览样式不对，请启动预览服务前运行一遍 `hexo clean` 命令</span></span><br><span class="line"><span class="comment"># theme: landscape  #默认主题，最简单</span></span><br><span class="line"><span class="comment"># theme: maupassant #简洁的博客主题，配置文件：_config.maupassant.yml</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span>  <span class="comment">#时尚的博客主题，配置文件：_config.butterfly.yml</span></span><br><span class="line"><span class="comment"># theme: matery #响应式布局多媒体主题，配置文件：_config.matery.yml</span></span><br><span class="line"><span class="comment"># theme: fluid #Material Design 风格主题，配置文件：_config.fluid.yml</span></span><br><span class="line"><span class="comment"># theme: next #简约的博客主题，配置文件：_config.next.yml</span></span><br><span class="line"><span class="comment"># theme: Academia #学术简历主题，配置文件：_config.Academia.yml</span></span><br><span class="line"><span class="comment"># theme: yelee #双栏博客主题，配置文件：_config.yelee.yml</span></span><br></pre></td></tr></table></figure>
<p>接下来就对指定的主题进行配置，具体到主题功能设置每个主题都不一样，所以需要根据实际使用的主题文档去配置，一般在主题目录下都会有个 <code>README.md</code> ，请打开或者找到主题在线文档去阅读，主题让装啥就装啥，让咋改就咋改。</p>
<p>为了以后更新主题时不覆盖我们已经配置好的内容，可以将主题目录下的 <code>_config.yml</code> 复制到 <code>hexo根目录</code> 下，并重命名为：<code>_config.主题名.yml</code> ，如：<code>_config.fluid.yml</code> 。</p>
<blockquote>
<p><code>_config.主题名.yml</code> 来源于 <code>themes/主题名/_config.yml</code> 或 <code>node_modules/hexo-theme-主题名/_config.yml</code>，如主题有更新请自行同步</p>
</blockquote>
<blockquote>
<p>Hexo 会将 <code>_config.主题名.yml</code> 和主题目录下的 <code>_config.yml</code> 配置内容 <strong>合并</strong>  <strong>合并</strong>  <strong>合并</strong> 使用，相同配置项则以 <code>_config.主题名.yml</code> 中的值为准</p>
</blockquote>
<p>然后按照主题说明文档在新复制的主题配置中按需进行配置，以后主题有更新，如果涉及到该配置文件变更，请将最新内容同步到 <code>_config.主题名.yml</code> 中即可。</p>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 其他知识</title>
    <url>/action-hexo/guide-how-to-build-site-8.html</url>
    <content><![CDATA[<p>想到什么写什么，如果没有你关心的问题，请一如既往的求助本站战略合作伙伴 Google和百度。</p>
<span id="more"></span>
<h1>学会基本的 Git</h1>
<p>不管是敲代码还是码字工，大名鼎鼎的 Git 都应该学一点，团队一起码代码，汇聚天下豪杰一起写流水小说，事后回查都游刃有余。</p>
<h2 id="Git-基础"><a class="headerlink" href="#Git-基础"></a>Git 基础</h2>
<p>网络上优秀教程一大片，不浪费时间精力了，随便找一个：<a href="https://www.runoob.com/git/git-basic-operations.html">Git 教程 | 菜鸟教程</a>，边用边学就行，俺们也是这样过来的。</p>
<h2 id="改了文件名大小写，Git-不会显示变更无法提交"><a class="headerlink" href="#改了文件名大小写，Git-不会显示变更无法提交"></a>改了文件名大小写，Git 不会显示变更无法提交</h2>
<p>Git 默认对文件名大小写不敏感，即便你把一个文件名从 <code>a.conf</code> 改成 <code>A.CONF</code> ，Git 也认为没有变更，所以也就无法将此变更提交同步到仓库，需要在项目仓库路径下运行以下命令禁用忽略大小写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config core.ignorecase <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>设置完就对大小写敏感了，此时更改文件名大小写就能提交变更了。</p>
<h2 id="让-Git-通过代理连接"><a class="headerlink" href="#让-Git-通过代理连接"></a>让 Git 通过代理连接</h2>
<p>有些地区直接无法连接全球男性交友社区，也就无从谈起仓库增删改，就需要借助代理连接，可通过以下命令指定Git走代理网络：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里使用socks5 端口为1080，具体端口看代理软件配置</span></span><br><span class="line">git config --global http.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span> </span><br><span class="line">git config --global https.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br></pre></td></tr></table></figure>
<p>查看代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>
<p>取消代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>
<p>或者也可以通过编辑 Git 配置文件直接配置，打开 <code>用户目录/.gitconfig</code> ，Windows系统如 <code>C:\Users\ywm\.gitconfig</code> ，增加如下内容：</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是个使用 clash 代理的默认端口示例，具体请看代理软件配置</span></span><br><span class="line"><span class="section">[core]</span></span><br><span class="line">	<span class="attr">gitproxy</span> = socks5://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br><span class="line"><span class="section">[http]</span></span><br><span class="line">	<span class="attr">postBuffer</span> = <span class="number">524288000</span></span><br><span class="line">	<span class="attr">postBuffer</span> = <span class="number">524288000</span></span><br><span class="line">	<span class="attr">proxy</span> = socks5://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br><span class="line"><span class="section">[https]</span></span><br><span class="line">	<span class="attr">postBuffer</span> = <span class="number">524288000</span></span><br><span class="line">	<span class="attr">postBuffer</span> = <span class="number">524288000</span></span><br><span class="line">	<span class="attr">proxy</span> = socks5://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>打开 <code>.gitconfig</code> 文件可见之前配置的用户名称和email信息等，直接通过编辑配置文件和通过命令设置是一样的效果。</p>
</blockquote>
<p>以上是针对 <code>http[s]://</code> 协议的代理设置方式，一般 <code>ssh://</code> 协议链接不需要代理，如果需要，可以参考此教程去设置：<a href="https://segmentfault.com/a/1190000021998129" title="懒得写教程，自己到此去仔细看">Git 通过配置SSH代理访问 Github</a></p>
<h2 id="添加-删除-submodule"><a class="headerlink" href="#添加-删除-submodule"></a>添加/删除 <code>submodule</code></h2>
<p>本仓库包中自带的 Hexo 主题都是通过 <code>git submodule add</code> 管理的，主题只是作为一个版本链接提交，源码仓库中 <code>themes</code> 目录下并不包含主题文件。</p>
<blockquote>
<p>以 <code>submodule</code> 方式管理的文件是不能直接在主仓库进行增删改操作的，改了会出现 <code>Subproject commit xxxx-dirty</code> 提示，线上使用时将会出现找不到 <code>submodule</code> 版本的错误</p>
</blockquote>
<p>如果想添加其他的主题，可以将主题文件提交，作为仓库项目的一部分，也可以以 <code>submodule</code> 方式应用，添加只需要一条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule add --depth=1 主题仓库地址 themes/主题名</span><br></pre></td></tr></table></figure>
<p>这样该主题文件夹只是以一个指定版本链接的形式存在于本仓库项目中，如果想完整下载到本地，添加 <code>--recurse-submodules</code> 参数就能一起克隆：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recurse-submodules 源码仓库地址 <span class="comment">#带子模块一起克隆到本地</span></span><br></pre></td></tr></table></figure>
<p>如果不需要其中某个主题，可以通过以下方法删除掉，以删除 <code>themes/ananke</code> 这个主题为例：</p>
<ol>
<li>删除 <code>.gitmodules</code> 中这部分<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line">  <span class="section">[submodule &quot;themes/ananke&quot;]</span></span><br><span class="line"><span class="attr">path</span> = themes/ananke</span><br><span class="line"><span class="attr">url</span> = https://github.com/theNewDynamic/gohugo-theme-ananke.git</span><br></pre></td></tr></table></figure>
</li>
<li>删除 <code>.git/config</code> 中以下部分<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line">  <span class="section">[submodule &quot;themes/ananke&quot;]</span></span><br><span class="line"><span class="attr">url</span> = https://github.com/theNewDynamic/gohugo-theme-ananke.git</span><br><span class="line"><span class="attr">active</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li>删除 <code>.git\modules\themes</code> 目录下的 <code>ananke</code> 文件夹</li>
<li>删除 <code>themes\ananke</code> 文件夹</li>
<li>在 Git 中将以上变更暂存</li>
<li>在项目根目录路径下运行 <code>git rm --cached themes\ananke</code> 命令清理 Git 工作区缓存</li>
</ol>
<p>至此，该 <code>submodule</code> 就从版本库中删除了，将所有变更结果提交同步到线上仓库即可。</p>
<h2 id="Git-回滚到指定版本"><a class="headerlink" href="#Git-回滚到指定版本"></a>Git 回滚到指定版本</h2>
<ol>
<li>在 <code>仓库文件夹下</code> 打开 <code>Git Bash Here</code> 输入 <code>git reflog</code> 命令，会返回这样的历史提交记录： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ef39b2d (HEAD -&gt; main, origin/main, origin/HEAD) HEAD@&#123;0&#125;: commit: update</span><br><span class="line">fa646fe HEAD@&#123;14&#125;: commit: 角色管理站点权限不可编辑bug修改</span><br><span class="line">60b35d4 HEAD@&#123;15&#125;: commit: 拓扑图相关修改9</span><br><span class="line">3173e7a HEAD@&#123;16&#125;: commit: 拓扑图相关修改8</span><br><span class="line">d51db77 HEAD@&#123;17&#125;: commit: 拓扑图相关修改8</span><br></pre></td></tr></table></figure>
</li>
<li>按 <code>q</code> 「英文状态下」退出 log 记录，然后输入回退到指定版本命令：<code>git reset xxx</code>，<code>xxx</code> 指某次提交的版本记录 <code>id</code>，如：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 `--hard` 参数会将工作区变更全部擦除</span></span><br><span class="line">git reset --hard 3173e7a</span><br></pre></td></tr></table></figure>
</li>
<li>强制推送至远程：输入命令 <code>git push --force</code>，至此版本回退就成功了</li>
</ol>
<h1>Hexo 高级用法</h1>
<p>如果只是普通的写写博客，做个小展示网站什么的，高级语法也不需要。但用上些高级语法，功能就更强大，在处理大量同质内容时就事半功倍了，直接见官方文档吧：</p>
<ol>
<li><a href="https://hexo.io/zh-cn/docs/tag-plugins">Hexo：标签插件（Tag Plugins）</a></li>
<li><a href="https://hexo.io/zh-cn/docs/data-files">Hexo：数据文件（data-files）</a></li>
</ol>
<p>Hexo标签语法能够快速实现一些功能，但并不是所有的主题都支持，当在内容中使用了标签语法，而主题不支持时，将出现渲染失败异常，如下面这段 <code>ButterFly</code> 主题支持的图库代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span><br><span class="line">&#123;% galleryGroup &#x27;自带主题&#x27; &#x27;主题预览截图&#x27; &#x27;/gallery/&#x27; https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>切换到其他主题要么功能未实现，要么直接渲染出错异常，需要删除对应的内容方可。</p>
<h1>MarkDown 语法</h1>
<h2 id="📌-Titles"><a class="headerlink" href="#📌-Titles"></a>📌 <strong>Titles</strong></h2>
<ul>
<li>Heading 1: <code># A first-level title</code></li>
<li>Heading 2: <code># A second-level title</code></li>
<li>Heading 3: <code>## A third-level title</code></li>
</ul>
<h2 id="💻-Code-blocks"><a class="headerlink" href="#💻-Code-blocks"></a>💻 <strong>Code blocks</strong></h2>
<p><code>creates a new code block.</code>，源码如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`creates a new code block.`</span></span><br></pre></td></tr></table></figure>
<p><code>```py</code> creates a new code block with Python syntax highlighting.</p>
<h2 id="📋-Lists"><a class="headerlink" href="#📋-Lists"></a><strong>📋</strong> <strong>Lists</strong></h2>
<p>We automatically detect ordered and un-ordered lists as you type.</p>
<p>Begin a line with <code>- </code> or <code>* </code> to start a bullet list.<br>
Being a line with <code>1. </code> to start a numbered list. Use <code>Tab</code> to go one level deeper, and <code>Shift+Tab</code> to go up. Begin a line with <code>- [ ] </code> to start a task list.</p>
<h2 id="🎤-Quotes"><a class="headerlink" href="#🎤-Quotes"></a><strong>🎤</strong> <strong>Quotes</strong></h2>
<p>Begin a line with <code>&gt; </code> to create a block quote.</p>
<h2 id="🐮-emoji-markup"><a class="headerlink" href="#🐮-emoji-markup"></a><strong>🐮</strong> <strong>emoji markup</strong></h2>
<p>😊 	<em>😃</em> 	😴</p>
<p><a href="https://gist.github.com/rxaviers/7360908">Complete list of github markdown emoji markup</a></p>
<p><a href="https://www.emojiall.com/zh-hans/all-emojis">另一个emoji表情大全</a></p>
<h2 id="💖-Images"><a class="headerlink" href="#💖-Images"></a><strong>💖</strong> <strong>Images</strong></h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片alt</span>](<span class="link">图片链接 &quot;图片title&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>图片链接有两种方法引用，任意一种都可以，各有利弊，自行选择。</p>
<p>方法1：上传到图床，然后通过图床地址引用</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#图床就是别人提供给你的存储空间和网络</span></span><br><span class="line">![<span class="string">图床引用</span>](<span class="link">https://s1.ax1x.com/2022/12/06/z6rzA1.jpg &quot;imgse图床引用示例&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>方法2：图片文件存在项目内，本地引用</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#相对路径：相对于本文档的路径，`..` 表示上级目录</span></span><br><span class="line"><span class="section">#这种写法在MarkDown编辑器中可以实时预览效果</span></span><br><span class="line">![<span class="string">自存相对路径引用</span>](<span class="link">../../images/hexo.jpeg &quot;图片引用示例&quot;</span>)</span><br><span class="line"><span class="section">#绝对路径：引用网络路径，未经网络解析无法预览，但发布到网络上是正确的</span></span><br><span class="line">![<span class="string">自存绝对路径引用</span>](<span class="link">/images/hexo.jpeg &quot;图片引用示例&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><code>Hexo</code> 项目 <code>/source</code> 目录为网络根路径 <code>/</code> ，本地文件 <code>/source/images/hexo.jpeg</code> 在网络上对应的 url 为：<code>https://yiwangmeng.cn/images/hexo.jpeg</code></p>
<h2 id="References"><a class="headerlink" href="#References"></a>References</h2>
<ol>
<li><a href="http://xianbai.me/learn-md/article/about/readme.html">Markdown 入门参考</a></li>
<li><a href="https://markdown.com.cn/basic-syntax/">Markdown 基本语法</a></li>
<li><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 菜鸟教程</a></li>
</ol>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 常见问题</title>
    <url>/action-hexo/guide-how-to-build-site-9.html</url>
    <content><![CDATA[<h2 id="话说在前"><a class="headerlink" href="#话说在前"></a>话说在前</h2>
<h3 id="我不会-看不懂-不想看-太麻烦-不要发教程……"><a class="headerlink" href="#我不会-看不懂-不想看-太麻烦-不要发教程……"></a>我不会/看不懂/不想看/太麻烦/不要发教程……</h3>
<p>懒那就没辙了，快发动你的钞能力！</p>
<blockquote>
<p><code>按次付费</code>，花了钱也不可能一直伺候你，有些人想付费站长也不乐意接，毕竟彼此选择才能幸福！</p>
</blockquote>
<!-- <div style="float:left;border:solid 1px 000;margin:2px;"><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/QR-atm.png"  width="200" height="260" ></div> -->
<div style="float:left;border:solid 1px 000;margin:2px;"><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/QR-Taobao.png" width="200" height="260" ></div>
<div style="float:left;border:solid 1px 000;margin:2px;"><img src="https://static.yiwangmeng.com/https://raw.githubusercontent.com/828767/static/master/images/QR-QQ-260489333.png" width="200" height="260" ></div>
<div style="clear:both"></div>
<h3 id="问就发教程，就不能直接给我远程解决吗？"><a class="headerlink" href="#问就发教程，就不能直接给我远程解决吗？"></a>问就发教程，就不能直接给我远程解决吗？</h3>
<p>请看上一条！</p>
<p>有教程都不舍得看一眼，这么珍惜自己的时间精力就该想到别人也一样。劳动是按次付出的，之前的需求已完成那么站长就履约结束，请问这次是付费了吗？</p>
<p>你丢出问题，站长提供解决思路，不是什么态度不好的问题，站长的时间精力有限，废话多说无益！耐心一点，也许迎刃而解；友好一点，指不定站长闲得慌还能友情远程搭把手。</p>
<p>上帝？滚！！！站长的世界里人人平等！</p>
<h2 id="主题相关"><a class="headerlink" href="#主题相关"></a>主题相关</h2>
<h3 id="怎么更换-安装-配置主题？"><a class="headerlink" href="#怎么更换-安装-配置主题？"></a>怎么更换/安装/配置主题？</h3>
<p>请打开网站配置文件 <code>_config.yml</code> 仔细看下，有更换主题的配置注释。至于主题安装及功能配置，每个主题大同小异，但言而总之，请找到主题的说明文档，根据主题文档去操作，方法详见：<a href="/action-hexo/guide-how-to-build-site-7.html" title="从零开始建个小站 - 5. 个性化设置">从零开始建个小站 - 5. 个性化设置</a></p>
<h3 id="为什么换了个主题就报错了？"><a class="headerlink" href="#为什么换了个主题就报错了？"></a>为什么换了个主题就报错了？</h3>
<p>主题不一样，有可能要求的依赖不一样，或者支持的功能不一样，如：有的主题支持 <code>&#123;% xxx %&#125;</code> 标签功能，有的不支持，如果你的内容中用了这些标签，当切换到一个不支持的主题时就会渲染失败报错，所以：请阅读主题文档，根据主题要求去使用！</p>
<blockquote>
<p>示例站内容中就使用了标签语法，如果切换到其他主题报错请删除以下包含了标签语法的示例目录：</p>
<ol>
<li>图库页面：<code>source/gallery</code></li>
<li>引导教程：<code>source/_posts/guide</code></li>
</ol>
</blockquote>
<h3 id="去哪找自己喜欢的主题？"><a class="headerlink" href="#去哪找自己喜欢的主题？"></a>去哪找自己喜欢的主题？</h3>
<p>本站提供的仓库方案中，自带 <a href="/action-hexo/gallery/" title="自带主题预览图汇总">数套精选特色主题</a>，只需要更改网站配置中的主题配置项启用即可。</p>
<p>每个人的审美和需求都不一样，如果自带的这几套主题都看不上眼，请自行到 <a href="https://hexo.io/themes/">Hexo官方主题展示页</a> 去挑选，萝卜白菜都是你自己的喜好。</p>
<h3 id="怎么更新主题？"><a class="headerlink" href="#怎么更新主题？"></a>怎么更新主题？</h3>
<p>主题安装方式包括：本地 themes 文件夹、<code>git submodule</code>和 npm 包管理，各种安装方式对应大同小异：</p>
<ul>
<li>本地 themes 文件夹：文件都存储在本地主题文件夹下，更新主题文件夹内内容即可</li>
<li><code>git submodule</code>：使用 git 同步子模块最新代码即可。该子模块主题需要有管理权限，有管理权限则更新对应版本代码后提交到 git 仓库，否则本地不要做任何更改</li>
<li>npm 包管理：在网站根目录下执行 <code>npm install hexo-theme-主题名</code>命令即可安装最新版，如果要指定版本，请编辑网站根目录下的 <code>package.json</code> 指定版本号，如：“hexo-theme-butterfly”: <code>&quot;5.3.3&quot;</code>，npm 版本号更多知识可以搜索关键词：<code>package.json 版本号规则</code></li>
</ul>
<p>主题代码更新后，可能还会涉及配置更新，所以请将主题目录下的 <code>_config.yml</code> 配置与网站根目录下的 <code>_config.主题名.yml</code> 进行相应同步，内容比对工具推荐 vscode 或 BCompare</p>
<h2 id="好奇宝宝好动手"><a class="headerlink" href="#好奇宝宝好动手"></a>好奇宝宝好动手</h2>
<h3 id="关于页面怎么来的？"><a class="headerlink" href="#关于页面怎么来的？"></a>关于页面怎么来的？</h3>
<p>页面都是需要根据自己需求创建的，，有些主题文档中也会提及，或者请参考：<a href="https://www.yiwangmeng.com/common-problems-and-solutions-of-goodhexo#%E5%85%B3%E4%BA%8E%E8%8F%9C%E5%8D%95%E6%80%8E%E4%B9%88%E6%9D%A5">关于菜单怎么来</a></p>
<blockquote>
<p>其他 <code>标签</code>，<code>分类</code>，<code>友链</code>等页面以此类推，更多需要参考主题实现文档</p>
</blockquote>
<h3 id="怎么我改了没效果？"><a class="headerlink" href="#怎么我改了没效果？"></a>怎么我改了没效果？</h3>
<p>任何增删改都需要提交同步到上端仓库，请确保你所做的更改已经提交同步完成，然后等几分钟服务器刷新缓存，对照内容维护可参考：<a href="/action-hexo/guide-how-to-build-site-6.html" title="从零开始建个小站 - 4. 练手内容维护">从零开始建个小站 - 4. 练手内容维护</a> 中相关内容。</p>
<blockquote>
<p>很多小白以为点了 <code>commit</code> 就万事大吉了，请仔细看下上面的教程，点完 <code>commit</code> 只是提交到了本地版本库，<code>push</code> 或者 <code>sync</code> 完成前别处并不知道有这回事。</p>
<p>而且，点 <code>commit</code> 前请务必填写 <code>message</code> ，告知后来人改了什么，为什么会有这次变更，这是 Git 版本管理基本规范。</p>
</blockquote>
<h3 id="改了几行代码，就异常了"><a class="headerlink" href="#改了几行代码，就异常了"></a>改了几行代码，就异常了</h3>
<p>改了啥自己清楚，Git 历史记录中也能对比前后差异，所以改完建议本地预览一下结果，启动 <code>hexo server</code> 预览的时候就会显示日志，循着异常日志去看下具体什么问题，然后对应修正即可。</p>
<p>或者把错误提示关键词丢给本站战略合作伙伴 Google、百度及各种 AI 工具，让我们的战略伙伴助你一臂之力。</p>
<h3 id="删了些东西后外网-403，本地预览提示-can-t-get"><a class="headerlink" href="#删了些东西后外网-403，本地预览提示-can-t-get"></a>删了些东西后外网 <code>403</code>，本地预览提示 <code>can't get /</code></h3>
<p>一些 <code>page</code> 文件夹可以随意删，最多提示 <code>404</code>，但 <code>source/_posts</code> 目录下 <code>必须存在一篇以上文章</code>，否则视为空站无内容，无内容就不会生成 <code>index.html</code>，此时推送到外网就会不存在网站首页，访问时 <code>nginx</code> 就会抛 <code>403</code> 错误。</p>
<p>所以：推送发布前你预览了吗？预览不正常还推送发布？</p>
<h3 id="外网访问提示-not-found-404"><a class="headerlink" href="#外网访问提示-not-found-404"></a>外网访问提示 <code>not found 404</code></h3>
<ol>
<li>请确认访问的地址是正确的，是不是线上渲染工作还没完成</li>
<li>本地请先预览，如果本地不正常，先解决本地的问题，参考前文 <code>403</code> 问题</li>
<li>请检查线上对外展示仓库指定的 <code>page</code> 分支是否正确，刚推送的仓库请稍等片刻，清理本地浏览器缓存，静态上端刷新缓存完成</li>
<li>一些被党和人民特别关照的内容，请上梯子访问</li>
</ol>
<h3 id="网站预览显示空白什么都没有"><a class="headerlink" href="#网站预览显示空白什么都没有"></a>网站预览显示空白什么都没有</h3>
<p>应该是找不到主题文件，在预览命令下应该会输出 <code>WARN No layout: index.html</code>。</p>
<p>更换主题时请注意预览时本地需要完整下载主题文件，且网站配置 <code>_config.yml</code> 中配置正确的主题文件夹名称，如主题文件夹保存为 <code>hexo-theme-butterfly</code>，那么就需要配置为：<code>theme: hexo-theme-butterfly</code>，所以为方便配置及缩短配置文件命名一般只以最短主题名文件夹存储。</p>
<h3 id="这个样式我不喜欢，怎么改？"><a class="headerlink" href="#这个样式我不喜欢，怎么改？"></a>这个样式我不喜欢，怎么改？</h3>
<p>请去翻下 <code>主题配置</code> 和 <code>主题文档</code> ，如果没看到相关设置或者满足不了你的需求，能问这问题的同学还是建议别折腾魔改主题了，去换个主题更实际点，更换主题方法请参考前文 <a href="#%E6%80%8E%E4%B9%88%E6%9B%B4%E6%8D%A2-x2F-%E5%AE%89%E8%A3%85-x2F-%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98%EF%BC%9F">怎么更换/安装/配置主题</a>。</p>
<blockquote>
<p>如果有能力折腾修改主题的同学，恰好修改的主题是示例站自带，那么请注意 <code>submodule</code> 的问题。</p>
<p>示例站自带主题在项目中只提交了源仓库版本链接，你本地修改了也不能提交到自己的仓库，请将要修改的主题从 <code>submodule</code> 中删除后再完整提交到自己的源码仓库中，删除 <code>submodule</code> 可参考：<a href="/action-hexo/guide-how-to-build-site-8.html" title="从零开始建个小站 - 其他知识">从零开始建个小站 - 其他知识</a> 中 <code>添加/删除 submodule</code> 相关内容。</p>
</blockquote>
<h3 id="VSCODE-里-Git-提交点-commit-后一直转圈圈？"><a class="headerlink" href="#VSCODE-里-Git-提交点-commit-后一直转圈圈？"></a>VSCODE 里 Git 提交点 <code>commit</code> 后一直转圈圈？</h3>
<p>正如 <a href="/action-hexo/guide-how-to-build-site-5.html" title="从零开始建个小站 - 3. 搞个编辑器">从零开始建个小站 - 3. 搞个编辑器</a> 中 <code>界面化Git操作</code> 章节明确提示的内容：</p>
<blockquote>
<p>点 <code>commit</code> 前请务必填写 <code>message</code> ，告知后来人改了什么，为什么会有这次变更，这是 Git 版本管理基本规范。</p>
</blockquote>
<p>一直转圈圈请退出 <code>Git</code> 或者 <code>VSCODE</code> 后重新提交，记得 <code>提交前填写变更信息</code>、<code>提交前填写变更信息</code>、<code>提交前填写变更信息</code>！</p>
<h2 id="天天向上"><a class="headerlink" href="#天天向上"></a>天天向上</h2>
<h3 id="MarkDown语法我不会😢"><a class="headerlink" href="#MarkDown语法我不会😢"></a>MarkDown语法我不会😢</h3>
<p>MarkDown语法已经很简单易懂了，这里有一个章节列了几个常用到的基本语法： <a href="/action-hexo/guide-how-to-build-site-8.html" title="从零开始建个小站 - 其他知识">从零开始建个小站 - 其他知识</a> ，更多可以阅读后文更专业的MarkDown语法教程。</p>
<p>对照教程敲一两遍就会了，用啥查啥临时抱佛脚都能应付得了。实在不会可以借助编辑器界面化操作，或者你就当Word或记事本写内容都行，无非就是少了点格式样式。</p>
<blockquote>
<p>在 <a href="/action-hexo/guide-how-to-build-site-5.html" title="从零开始建个小站 - 3. 搞个编辑器">从零开始建个小站 - 3. 搞个编辑器</a> 章节中推荐的 <code>VSCODE</code>，可以对 MarkDown 源码实时预览实现所见即所得编辑，装上 MarkDown 扩展后更是事半功倍，请自行摸索学习。</p>
</blockquote>
<h3 id="我添加的图片怎么不显示？"><a class="headerlink" href="#我添加的图片怎么不显示？"></a>我添加的图片怎么不显示？</h3>
<p>请自行按 MarkDown 或者 HTML 语法添加图片，也可以打开本站自带的示例源码依葫芦画瓢，语法具体可见：<a href="/action-hexo/guide-how-to-build-site-8.html" title="从零开始建个小站 - 其他知识">从零开始建个小站 - 其他知识</a> 中 <code>MarkDown 语法</code> 及后续贴出的相关教程。</p>
<blockquote>
<p>如果是网络封锁严重的地区，建议将图片传图床后从图床引用，防止 <code>jsdelivr</code>、<code>Github</code> 等被屏蔽导致图片加载失败</p>
</blockquote>
<h3 id="文章-URL-不符合预期"><a class="headerlink" href="#文章-URL-不符合预期"></a>文章 URL 不符合预期</h3>
<p>URL 组织形式可以按配置指定，详细可参考 <a href="https://hexo.io/docs/permalinks">Hexo 官方文档 permalinks 说明</a>。</p>
<p>当想按目录路径组织文章时，默认文章 URL 形式为：<code>https://yiwangmeng.cn/action-hexo/guide/how-to-build-site-0.html</code>，某些设置可能影响 URL 中路径表现形式，如 Hexo 配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># 新建文章文件命名格式</span></span><br><span class="line"><span class="comment"># 配置`:title.md`格式URL路径支持目录：`/dir/title`</span></span><br><span class="line"><span class="comment"># 配置`:year-:month-:title.md`时URL将变成：`/dir-title`</span></span><br></pre></td></tr></table></figure>
<p>已发现问题中，新建文章的文件名命名配置会影响 URL 路径形式，当配置 <code>:year-:month-:title.md</code> 时 URL 将变成：<code>https://yiwangmeng.cn/action-hexo/guide-how-to-build-site-0.html</code>，<code>/guide/</code> 目录路径被同化成了文件名的前缀。</p>
<h2 id="后顾之忧"><a class="headerlink" href="#后顾之忧"></a>后顾之忧</h2>
<h3 id="换电脑怎么办？"><a class="headerlink" href="#换电脑怎么办？"></a>换电脑怎么办？</h3>
<p>本站提供的仓库方案，只要你仓库不删就不会丢，新电脑上照本站使用教程克隆源码仓库安装一遍本地预览环境和 SSH 密钥就可以了，如果你遵循 Git 提交规则，不管到哪有多少个设备都可以一起用，也可以随时恢复到任意一次提交的版本。</p>
<h3 id="要修改网址怎么办？"><a class="headerlink" href="#要修改网址怎么办？"></a>要修改网址怎么办？</h3>
<p>网站网址在 Hexo 配置文件 <code>_config.yml</code> 中修改如下配置项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  网址, 必须以 http[s]:// 开头</span></span><br><span class="line"><span class="comment">#  没有自己的域名就用免费 username.github.io</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://yiwangmeng.cn</span></span><br></pre></td></tr></table></figure>
<p>如果用自己的域名，请修改配置的同时，在域名解析托管商处做好 <code>CNAME</code> 解析，<strong>一般都是</strong>添加这样的两条记录：</p>
<ul>
<li>记录/名称/<code>Name</code>：<code>@</code> 和 <code>www</code></li>
<li>方式/类型/<code>Type</code>：<code>CNAME</code></li>
<li>记录值/解析目标/<code>Target</code>：<code>username.github.io</code></li>
</ul>
<p><code>username</code> 是你 GitHub 用户名，所以当你想更改 GitHub 提供的免费二级域名时，需要：</p>
<ol>
<li>先更改自己的用户名</li>
<li>其次同步修改这个 <code>username.github.io</code> 的 Pages 仓库名</li>
<li>然后配置中或者 DNS 解析记录也要相应的同步修改</li>
</ol>
<h3 id="有没有后台？能不能在线维护？"><a class="headerlink" href="#有没有后台？能不能在线维护？"></a>有没有后台？能不能在线维护？</h3>
<p>有做后台的方案，也有将 GitHub 仓库再拖到第三方平台去部署的方案，但都不推荐。本来 <code>hexo</code> 或 <code>hugo</code> 就只是个渲染框架，用的时候拎出来跑一圈，跑完就没啥事放生掉，有些人却要强迫这俩货长期站街营业，或者再转一次第三方，如果不是特殊需求，都属于舍本逐末瞎折腾。</p>
<p>如果想在线维护内容，本站仓库方案也可以直接在 GitHub 仓库 <code>code</code> 界面增删改文件，然后网页上就地提交变更就完事，和克隆到本地使用区别就是线上只能单个文件增删改然后提交，小改临时用用倒没什么问题，变更得多还是建议克隆到本地电脑维护。</p>
<h3 id="能部署到自己的云服务器上吗？"><a class="headerlink" href="#能部署到自己的云服务器上吗？"></a>能部署到自己的云服务器上吗？</h3>
<p>能，方案大致有：</p>
<ol>
<li>仍然延用本站仓库方案，部署好相关权限，在 <code>GitHub Action</code> 中添加发布到自己的服务器步骤</li>
<li>丢弃本站仓库方案，按官方文档修改发布配置，然后用 <code>hexo g &amp;&amp; hexo d</code> 命令发布到自己的服务器</li>
<li>在服务器上部署 hexo 环境，把 MarkDown 源码推送到自己的服务器，触发 <code>hexo g</code> 发布 <code>html</code></li>
</ol>
<blockquote>
<p>强烈不推荐在服务器上运行 <code>hexo server</code> 提供长期营业的残暴行为，这种做法极其愚蠢</p>
</blockquote>
<p>具体怎么做请自行求助本站战略合作伙伴。</p>
<h2 id="善人无疾"><a class="headerlink" href="#善人无疾"></a>善人无疾</h2>
<h3 id="GitHub咋打不开？"><a class="headerlink" href="#GitHub咋打不开？"></a>GitHub咋打不开？</h3>
<p>GitHub默认是不用爬墙的，但各地网络管制松紧度不一样，无法访问就上梯子吧。Windows 系统强烈推荐用 <a href="https://github.com/cdnf/winxray/tree/master" title="只知开源软件地址，代理服务请自己去找"><code>winXray</code></a> 这个代理软件，简单好用，简直是<a href="https://www.yiwangmeng.com/pcsoft-winxray" title="winXray简介">为 GitHub 而生</a>。</p>
<ol>
<li>Git 客户端仓库同步可以先尝试免梯子方法：配置好 <code>SSH</code> 密钥后使用 <code>SSH</code> 协议，方法可参考：<a href="/action-hexo/guide-how-to-build-site-4.html" title="从零开始建个小站 - 2. 拉取仓库到本地">从零开始建个小站 - 2. 拉取仓库到本地</a> 中 <code>生成 SSH 密钥对</code> 章节内容</li>
<li>Git 客户端启用梯子配置方法请见：<a href="/action-hexo/guide-how-to-build-site-8.html" title="从零开始建个小站 - 其他知识">从零开始建个小站 - 其他知识</a> 中相关内容</li>
</ol>
<h3 id="Git-推送同步失败"><a class="headerlink" href="#Git-推送同步失败"></a>Git 推送同步失败</h3>
<p>这问题比较复杂，网络或者权限问题居多，具体还需要看 Git 输出日志，提取关键信息求助战略合作伙伴基本上能解决。</p>
<p>常见处理方式：</p>
<ol>
<li>多试几次，或者挂梯子后再试，见前文</li>
<li>有一些系统无法自动保存 <code>~/.ssh/known_hosts</code> ，致使每次同步都要确认，而该确认提示在界面上看不到，可以切换到终端模式，按提示输入 <code>yes</code>，具体怎么做请自行求助本站战略合作伙伴。</li>
<li>检查密钥对，确保已经部署妥当</li>
</ol>
<h3 id="GitHub-页面上怎么创建文件夹"><a class="headerlink" href="#GitHub-页面上怎么创建文件夹"></a>GitHub 页面上怎么创建文件夹</h3>
<p>GitHub 仓库页面上默认是不能创建文件夹的，只能创建一个文件，然后文件路径中添加一层文件夹，如创建一个 <code>README.md</code>，在文件名输入相应内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">README.md <span class="comment">#直接在当前路径下创建README.md文件</span></span><br><span class="line"><span class="built_in">test</span>/README.md <span class="comment">#先创建test目录，在test目录创建README.md文件</span></span><br><span class="line"><span class="built_in">test</span>/test2/README.md <span class="comment">#同时创建了test和test2两级目录,test2目录创建README.md文件</span></span><br></pre></td></tr></table></figure>
<p>建议 <code>README.md</code> 里写点有意义的内容，如这个文件夹的用途说明介绍。</p>
<blockquote>
<p>如前文<a href="#%E6%9C%89%E6%B2%A1%E6%9C%89%E5%90%8E%E5%8F%B0%EF%BC%9F%E8%83%BD%E4%B8%8D%E8%83%BD%E5%9C%A8%E7%BA%BF%E7%BB%B4%E6%8A%A4%EF%BC%9F">能不能在线维护</a>中提及，单个文件偶尔在页面上维护没什么问题，多文件建议将代码克隆到本地操作，</p>
</blockquote>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
